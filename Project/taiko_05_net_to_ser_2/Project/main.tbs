'***********************************************************************************************************
'			THE SIMPLEST DEVICE SERVER (WITHOUT ACTIVE OPENS, WITH BUFFER REDIRECTION)
'***********************************************************************************************************
'
'	This project implements the simplest "serial device server" possible and uses
'BUFFER REDIRECTION. There is a single TCP connection (passive opens only).
'Once this connection is established, whatever is received through TCP is sent out via the
'serial port and vice versa.
'
'	ATTENTION! READ THE COMMENTS IN CODE! YOU MIGHT NEED TO CHANGE THE PROGRAM! For example,
'you may need to set correct IP address, baudrate, etc.
'
'
'RD.041907
'***********************************************************************************************************



'=============================================================
sub on_sys_init
'This event is always generated first. We use it to setup everything- a socket for TCP
'connection, serial port, etc.
'ATTENTION! Read this code- you might need to do some parameter changes!

	net.ip="192.168.1.95"	'<<<<<<<<<< IP-address of this device. CHANGE AS NEEDED!

	
	'Next, we request memory for the only socket we need. This is a simple allocation-
	'we ASSUME that we have enough memory for what we request.
	
	sock.num=0				'don't really have to do this- by default socket 0 is selected
	sock.rxbuffrq(4)		'we ask for 4*256-16=1008 bytes for the RX buffer of socket 0
	sock.txbuffrq(4)		'we ask for 4*256-16=1008 bytes for the TX buffer of socket 0


	'Now, we request memory for the serial port. This is a simple allocation- we ASSUME
	'that we have enough memory for what we request.
	
	ser.num=0				'don't really have to do it- we only have a single serial port
	ser.rxbuffrq(4)			'we ask for 4*256-16=1008 bytes for the RX buffer of the serial port
	ser.txbuffrq(4)			'we ask for 4*256-16=1008 bytes for the TX buffer of the serial port


	sys.buffalloc			'And now ACTUAL buffer memory allocation 


	'And now redirect buffers! After that we don't need to write any code for
	'on_sock_data_arrival and on_ser_data_arrival events!
	
	ser.redir(PL_REDIR_SOCK0)
 	sock.redir(PL_REDIR_SER)

	
	'We need to setup our socket for TCP/IP.

	sock.num=0								'Good practice (but, actually, redundant)
	sock.protocol=PL_SOCK_PROTOCOL_TCP		'We set TCP
	sock.localportlist="2000,3000"			'<<<<<<<<<< Listening ports. CHANGE AS NEEDED!
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT	'Accept connection from any host
	
	
	'Serial port also needs setup (we leave parity and bits/word at default- NO and 8)
	
	ser.num=0								'Good practice (but, actually, redundant)
	ser.flowcontrol=ENABLED					'<<<<<<<<<< Flow control ON. CHANGE AS NEEDED!
	ser.baudrate=ser.div9600/(38400/9600)	'We want to run at 38400bps
	ser.enabled=YES							'The serial port is now ON!


	'It is nice when your device provides some visual status of what it is doing.
	'After we boot, let's play a "power-on" pattern on the LEDs!
	pat.play("B-B-B------",YES)	'Blink Red & Green 3 times. <<<<<<<<<< CHANGE IF YOU WISH!
end sub


'=============================================================
sub on_sock_event(newstate as pl_sock_state, newstatesimple as pl_sock_state_simple)
'This event is generated whenever socket status changes. We are only using a single socket (#0) so
'we can be sure that this event is related to it.


	'Here is what we do: we don't check the socket state here, we just play a very short
	'LED pattern which momentarily dims bot Red and Green LEDs. When this pattern is done playing
	'the on_pat event will be generated and we will check socket state there!
	
	pat.play("-",YES)

end sub


'=============================================================
sub on_pat
'This event is generated each time previously loaded LED pattern has finished playing. We load
'new pattern basing on the current state of socket0 connection.


	sock.num=0		'Good practice but also redundant for our project
	
	
	'We just recognize 2 states: connected/not connected
	
	if sock.statesimple=PL_SSTS_EST then
		pat.play("GGGGGGGGGGGGGGGG",NO)	'Connection established- Green LED steadily on
	else 
		pat.play("-------------G-G",NO)	'Connection is not established- Green LED double-blinks
	end if

end sub

